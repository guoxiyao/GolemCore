// E:\go\GolemCore\internal\rpc\protocol\conway.proto
syntax = "proto3";
package golem.rpc;

option go_package = "GolemCore/internal/rpc/protocol";

// 任务定义
message ComputeTask {
  string task_id = 1;
  bytes grid_data = 2;       // 网格数据
  int32 generations = 3;     // 演化代数
  BoundaryType boundary = 4; // 边界类型
  int64 timestamp = 5;
}

// 计算结果
message ComputeResult {
  string task_id = 1;       //任务ID
  bytes result_data = 2;    // 结果数据
  double exec_time = 3;      // 执行时间(秒)
}

// 节点注册
message WorkerRegistration {
  string address = 1;        // 工作节点地址
  int32 capacity = 2;        // 最大并行任务数
}

//BrokerService 任务调度
service BrokerService {
  rpc SubmitTask(ComputeTask) returns (TaskResponse);
  rpc RegisterWorker(WorkerRegistration) returns (RegistrationResponse);
  rpc StreamResults(StreamRequest) returns (stream ComputeResult); // 流式接口
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskStatusResponse); // 状态查询
}

//ConwayService 计算服务
service ConwayService {
  rpc ComputeSync(ComputeTask) returns (ComputeResult);
  rpc ComputeStream(stream ComputeTask) returns (stream ComputeResult);
}

// 新增消息类型
message ComputeRequest {
  bytes grid_data = 1;
  int32 generations = 2;
}

message TaskResponse {
  string task_id = 1;
  int64 timestamp = 2;
}

// 辅助类型
enum BoundaryType {
  PERIODIC = 0;
  FIXED = 1;
  REFLECTIVE = 2;
}

message RegistrationResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
  string assigned_id = 2;  // 确保proto定义使用下划线命名
  int32 heartbeat_interval = 3;
}

message RegistrationRequest {
  string address = 1;
}

// 新增流式结果请求协议
message StreamRequest {
  string client_id = 1; // 修正字段名称为client_id
}

// 任务状态查询协议
message TaskStatusRequest {
  string task_id = 1; // 修正字段名称为task_id
}

message TaskStatusResponse {
  enum TaskStatus {
    UNKNOWN = 0;
    PENDING = 1;
    PROCESSING = 2;
    COMPLETED = 3;
    FAILED = 4;        // 补充FAILED状态
  }
  TaskStatus status = 1;
  double exec_time = 2;  // 执行时间(秒)
}

// 节点同步协议
message SyncNodesRequest {
  repeated WorkerRegistration nodes = 1;
}

message SyncNodesResponse {
  bool success = 1;
}