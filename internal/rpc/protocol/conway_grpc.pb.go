// E:\go\GolemCore\internal\rpc\protocol\conway.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: conway.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerService_SubmitTask_FullMethodName     = "/golem.rpc.BrokerService/SubmitTask"
	BrokerService_RegisterWorker_FullMethodName = "/golem.rpc.BrokerService/RegisterWorker"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 建议将服务拆分为两个清晰的接口
// BrokerService 处理任务提交和节点注册
type BrokerServiceClient interface {
	SubmitTask(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*TaskResponse, error)
	RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) SubmitTask(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, BrokerService_SubmitTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RegisterWorker(ctx context.Context, in *WorkerRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, BrokerService_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
//
// 建议将服务拆分为两个清晰的接口
// BrokerService 处理任务提交和节点注册
type BrokerServiceServer interface {
	SubmitTask(context.Context, *ComputeTask) (*TaskResponse, error)
	RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) SubmitTask(context.Context, *ComputeTask) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedBrokerServiceServer) RegisterWorker(context.Context, *WorkerRegistration) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SubmitTask(ctx, req.(*ComputeTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RegisterWorker(ctx, req.(*WorkerRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "golem.rpc.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _BrokerService_SubmitTask_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _BrokerService_RegisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conway.proto",
}

const (
	ConwayService_ComputeSync_FullMethodName   = "/golem.rpc.ConwayService/ComputeSync"
	ConwayService_ComputeStream_FullMethodName = "/golem.rpc.ConwayService/ComputeStream"
)

// ConwayServiceClient is the client API for ConwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConwayService 专责计算逻辑
type ConwayServiceClient interface {
	ComputeSync(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*ComputeResult, error)
	ComputeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ComputeTask, ComputeResult], error)
}

type conwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConwayServiceClient(cc grpc.ClientConnInterface) ConwayServiceClient {
	return &conwayServiceClient{cc}
}

func (c *conwayServiceClient) ComputeSync(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*ComputeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeResult)
	err := c.cc.Invoke(ctx, ConwayService_ComputeSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conwayServiceClient) ComputeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ComputeTask, ComputeResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConwayService_ServiceDesc.Streams[0], ConwayService_ComputeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ComputeTask, ComputeResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConwayService_ComputeStreamClient = grpc.BidiStreamingClient[ComputeTask, ComputeResult]

// ConwayServiceServer is the server API for ConwayService service.
// All implementations must embed UnimplementedConwayServiceServer
// for forward compatibility.
//
// ConwayService 专责计算逻辑
type ConwayServiceServer interface {
	ComputeSync(context.Context, *ComputeTask) (*ComputeResult, error)
	ComputeStream(grpc.BidiStreamingServer[ComputeTask, ComputeResult]) error
	mustEmbedUnimplementedConwayServiceServer()
}

// UnimplementedConwayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConwayServiceServer struct{}

func (UnimplementedConwayServiceServer) ComputeSync(context.Context, *ComputeTask) (*ComputeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSync not implemented")
}
func (UnimplementedConwayServiceServer) ComputeStream(grpc.BidiStreamingServer[ComputeTask, ComputeResult]) error {
	return status.Errorf(codes.Unimplemented, "method ComputeStream not implemented")
}
func (UnimplementedConwayServiceServer) mustEmbedUnimplementedConwayServiceServer() {}
func (UnimplementedConwayServiceServer) testEmbeddedByValue()                       {}

// UnsafeConwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConwayServiceServer will
// result in compilation errors.
type UnsafeConwayServiceServer interface {
	mustEmbedUnimplementedConwayServiceServer()
}

func RegisterConwayServiceServer(s grpc.ServiceRegistrar, srv ConwayServiceServer) {
	// If the following call pancis, it indicates UnimplementedConwayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConwayService_ServiceDesc, srv)
}

func _ConwayService_ComputeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConwayServiceServer).ComputeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConwayService_ComputeSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConwayServiceServer).ComputeSync(ctx, req.(*ComputeTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConwayService_ComputeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConwayServiceServer).ComputeStream(&grpc.GenericServerStream[ComputeTask, ComputeResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConwayService_ComputeStreamServer = grpc.BidiStreamingServer[ComputeTask, ComputeResult]

// ConwayService_ServiceDesc is the grpc.ServiceDesc for ConwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "golem.rpc.ConwayService",
	HandlerType: (*ConwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeSync",
			Handler:    _ConwayService_ComputeSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputeStream",
			Handler:       _ConwayService_ComputeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "conway.proto",
}
